apiVersion: operator.knative.dev/v1beta1
kind: KnativeServing
metadata:
  name: {{ app_name }}
  # TODO: make this configurable
  namespace: {{ serving_namespace }}
spec:
  version: {{ serving_version }}
  config:
    deployment:
      progress-deadline: {{ progress_deadline}}
      registries-skipping-tag-resolving: {{ registries_skip_tag_resolving }}
    {% if queue_sidecar_image %}
      queue-sidecar-image: {{ queue_sidecar_image }}
    {% endif %}
    features:
      kubernetes.podspec-affinity: "enabled"
      kubernetes.podspec-nodeselector: "enabled"
      kubernetes.podspec-tolerations: "enabled"
    # This is analogous to the config-istio configmap
    {% if not ingress_class %}
    istio:
      # TODO
      # To define the external gateway:
      # gateway.NAMESPACE-OF-GATEWAY.NAME-OF-GATEWAY: SOME-SERVICE.SOME-NAMESPACE.svc.cluster.local (I dont know what this is for, but if we cite an invalid namespace here the knative-serving object will not fully deploy)
      gateway.{{ gateway_namespace }}.{{ gateway_name }}: "some-workload.knative-operator.svc.cluster.local"
      # Defines the internal (inside cluster) gateway:
      # local-gateway.<local-gateway-namespace>.knative-local-gateway: "knative-local-gateway.<istio-namespace>.svc.cluster.local"
      # Where local-gateway-namespace is the same as the knative-namespace and istio-namespace is where istio is deployed, in this particular
      # case we know the gateway namespace and the istio namespace will be the same
      local-gateway.{{ serving_namespace }}.knative-local-gateway: "knative-local-gateway.{{ gateway_namespace }}.svc.cluster.local"
    {% endif %}
    # This is analogous to the config-domain configmap
    # TODO: defining this gateway config did nothing.  Maybe the operator doesn't support it?
    {% if ingress_class == 'gateway-api.ingress.networking.knative.dev' %}
    gateway:
      # TODO: Make this dynamic
      external-gateways: |
        - class: istio
          gateway: istio-system/istio-ingress-k8s
          # OPTIONAL - omitting it means it'll take a LB's first address
          # service: (cant remember if this was namespace/svc or a url)
          supported-features:
          - HTTPRouteRequestTimeout
      local-gateways: |
        - class: istio
          gateway: istio-system/istio-ingress-k8s
          # OPTIONAL - might not be optional for local gateway though
          # service: (cant remember if this was namespace/svc or a url)
          supported-features:
          - HTTPRouteRequestTimeout
    {% endif %}
    domain:
      {{ domain }}: ""
    {% if ingress_class %}
    network:
      # Setting this tells net-istio to not reconcile things, I think?  If I set this, I don't see any VirtualServices
      # created for knative services
      ingress-class: gateway-api.ingress.networking.knative.dev
    {% endif %}
{% if otel_collector_svc_name %}
    observability:
      metrics.backend-destination: opencensus
      metrics.request-metrics-backend-destination: opencensus
      metrics.opencensus-address: {{ otel_collector_svc_name }}.{{ otel_collector_svc_namespace }}:{{ otel_collector_port }}
{% endif %}
{% if custom_images %}
  registry:
    override:
      {% for container, image in custom_images.items() %}
      {{ container }}: {{ image }}
      {% endfor %}
{% endif %}
{% if http_proxy or https_proxy or no_proxy %}
  workloads:
  - name: controller
    env:
    - container: controller
      envVars:
    {% if http_proxy %}
      - name: HTTP_PROXY
        value: {{ http_proxy }}
    {% endif %}
    {% if https_proxy %}
      - name: HTTPS_PROXY
        value: {{ https_proxy }}
    {% endif %}
    {% if no_proxy %}
      - name: NO_PROXY
        value: {{ no_proxy }}
    {% endif %}
{% endif %}
